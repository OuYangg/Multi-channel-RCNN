# -*- coding: utf-8 -*-
"""
Created on Tue Jun 29 20:09:47 2021

@author: OuYang
"""
import numpy as np
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
import seaborn as sns
import os
import Models
import Utils
import Test
import Embeddings
import warnings

warnings.filterwarnings('ignore')
sns.set_style('ticks')
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

if __name__ == '__main__':
    # set seed
    Utils.setup_seed(5)
    # load networks
    # load training networks
    # In[1]
    BA_1000_4 = Utils.load_graph('./Networks/training/Train_1000_4.txt')
    BA_1000_4_sir = pd.read_csv('./SIR results/Train_1000_4/BA_1000_4.csv')
    BA_1000_4_label = dict(zip(np.array(BA_1000_4_sir['Node'],dtype=str),BA_1000_4_sir['SIR']))
    BA_1000_10 = Utils.load_graph('./Networks/training/BA_1000_10.txt')
    BA_1000_20 = Utils.load_graph('./Networks/training/BA_1000_20.txt')
    
    BA_2000_4 = Utils.load_graph('./Networks/training/BA_2000_4.txt')
    BA_2000_10 = Utils.load_graph('./Networks/training/BA_2000_10.txt')
    BA_2000_20 = Utils.load_graph('./Networks/training/BA_2000_20.txt')

    BA_3000_4 = Utils.load_graph('./Networks/training/BA_3000_4.txt')
    BA_3000_10 = Utils.load_graph('./Networks/training/BA_3000_10.txt')
    BA_3000_20 = Utils.load_graph('./Networks/training/BA_3000_20.txt')

    # load real-world networks
    PowerGrid = Utils.load_graph('./Networks/real/powergrid.txt')
    GrQ = Utils.load_graph('./Networks/real/CA-GrQc.txt')
    Facebook = Utils.load_graph('./Networks/real/facebook_combined.txt')
    Ham = Utils.load_graph('./Networks/real/Peh_edge.txt')
    Hep = Utils.load_graph('./Networks/real/CA-HepTh.txt')
    LastFM = Utils.load_graph('./Networks/real/LastFM.txt')
    Figeys = Utils.load_graph('./Networks/real/figeys.txt')
    Vidal = Utils.load_graph('./Networks/real/vidal.txt')
    Sex = Utils.load_graph('./Networks/real/sex.txt')

    # remove selfloops of real-world networks
    Figeys.remove_edges_from(nx.selfloop_edges(Figeys))
    Vidal.remove_edges_from(nx.selfloop_edges(Vidal))
    GrQ.remove_edges_from(nx.selfloop_edges(GrQ))
    Hep.remove_edges_from(nx.selfloop_edges(Hep))
    LastFM.remove_edges_from(nx.selfloop_edges(LastFM))
    PowerGrid.remove_edges_from(nx.selfloop_edges(PowerGrid))

    # load labels
    # load labels of BA networks
    BA_1000_10_label = Utils.load_sir_list('./SIR results/BA_1000_10/BA_1000_10_')[0]
    BA_1000_20_label = Utils.load_sir_list('./SIR results/BA_1000_20/BA_1000_20_')[0]
    BA_2000_4_label = Utils.load_sir_list('./SIR results/BA_2000_4/BA_2000_4_')[0]
    BA_2000_10_label = Utils.load_sir_list('./SIR results/BA_2000_10/BA_2000_10_')[0]
    BA_2000_20_label = Utils.load_sir_list('./SIR results/BA_2000_20/BA_2000_20_')[0]
    BA_3000_4_label = Utils.load_sir_list('./SIR results/BA_3000_4/BA_3000_4_')[0]
    BA_3000_10_label = Utils.load_sir_list('./SIR results/BA_3000_10/BA_3000_10_')[0]
    BA_3000_20_label = Utils.load_sir_list('./SIR results/BA_3000_20/BA_3000_20_')[0]

    # load labels of real-world networks
    Facebook_SIR = Utils.load_sir_list('./SIR results/Facebook/Facebook_')
    Ham_SIR = Utils.load_sir_list('./SIR results/Ham/Ham_')
    GrQ_SIR = Utils.load_sir_list('./SIR results/GrQ/GrQ_')
    Hep_SIR = Utils.load_sir_list('./SIR results/Hep/Hep_')
    LastFM_SIR = Utils.load_sir_list('./SIR results/LastFM/LastFM_')
    Figeys_SIR = Utils.load_sir_list('./SIR results/Figeys/Figeys_')
    Vidal_SIR = Utils.load_sir_list('./SIR results/vidal/vidal_')
    PowerGrid_SIR = Utils.load_sir_list('./SIR results/powergrid/powergrid_')
    Sex_SIR = Utils.load_sir_list('./SIR results/Sex/Sex_')
    
    # community division
    _,BA_1000_4_community,_ = Utils.Louvain(BA_1000_4)
    _,Facebook_community,_ = Utils.Louvain(Facebook)
    _,Ham_community,_ = Utils.Louvain(Ham)
    _,Hep_community,_ = Utils.Louvain(Hep)
    _,LastFM_community,_ = Utils.Louvain(LastFM)
    _,Sex_community,_ = Utils.Louvain(Sex)
    _,Figeys_community,_ = Utils.Louvain(Figeys)
    _,PowerGrid_community,_ = Utils.Louvain(PowerGrid)
    _,GrQ_community,_ = Utils.Louvain(GrQ)
    _,Vidal_community,_ = Utils.Louvain(Vidal)
    
    # basic info of real-world networks
    print('Facebook Network:\n',nx.info(Facebook))
    print('---------------------------')
    print('Ham Network:\n',nx.info(Ham))
    print('---------------------------')
    print('GrQ Network:\n',nx.info(GrQ))
    print('---------------------------')
    print('Hep Network:\n',nx.info(Hep))
    print('---------------------------')
    print('LastFM Network:\n',nx.info(LastFM))
    print('---------------------------')   
    print('Figeys Network:\n',nx.info(Ham))
    print('---------------------------')
    print('Vidal Network:\n',nx.info(Hep))
    print('---------------------------')
    print('PowerGrid Network:\n',nx.info(PowerGrid))
    print('---------------------------')
    print('Sex Network:\n',nx.info(Sex))
    # In[2]
    # train model 
    # parameters
    L1=28
    L2=28
    batch_size= 32
    num_epochs = 500
    lr = 0.001
    a_list = np.arange(1,2,0.1)
    # construct input
    BA_1000_rcnn = Embeddings.main(BA_1000_4,L1)
    BA_1000_mrcnn = Embeddings.main1(BA_1000_4,L2,BA_1000_4_community)
    BA_1000_mrcnn_com = Embeddings.main2(BA_1000_4,L2,BA_1000_4_community,method='community')
    BA_1000_mrcnn_shell = Embeddings.main2(BA_1000_4,L2,BA_1000_4_community,method='shell')
    
    # generate DataLoader
    rcnn_loader = Utils.Get_DataLoader(BA_1000_rcnn,BA_1000_4_label,batch_size,L1)
    mrcnn_loader = Utils.Get_DataLoader1(BA_1000_mrcnn,BA_1000_4_label,batch_size,L2)
    mrcnn_loader_com = Utils.Get_DataLoader2(BA_1000_mrcnn_com,BA_1000_4_label,batch_size,L2)
    mrcnn_loader_shell = Utils.Get_DataLoader2(BA_1000_mrcnn_shell,BA_1000_4_label,batch_size,L2)
    # initializing models
    rcnn= Models.CNN(L1)
    mrcnn = Models.CNN1(L2)
    mrcnn_com = Models.CNN2(L2)
    mrcnn_shell = Models.CNN2(L2)
    # train 
    RCNN,RCNN_loss = Utils.train_model(rcnn_loader,rcnn,num_epochs,lr,L1)
    MRCNN,MRCNN_loss = Utils.train_model(mrcnn_loader,mrcnn,num_epochs,lr,L2)
    MRCNN_com,MRCNN_com_loss = Utils.train_model(mrcnn_loader_com,mrcnn_com,num_epochs,lr,L2)
    MRCNN_shell,MRCNN_shell_loss = Utils.train_model(mrcnn_loader_shell,mrcnn_shell,num_epochs,lr,L2)
    # test
    # In[3] Experiment 1: Node ranking capability
    Facebook_RCNN_tau,Facebook_MRCNN_tau,Facebook_dc_tau,Facebook_ks_tau,Facebook_nd_tau,Facebook_bc_tau,Facebook_vc_tau = Test.compare_tau(Facebook,L1,L2,Facebook_SIR,Facebook_community,RCNN,MRCNN)
    GrQ_RCNN_tau,GrQ_MRCNN_tau,GrQ_dc_tau,GrQ_ks_tau,GrQ_nd_tau,GrQ_bc_tau,GrQ_vc_tau = Test.compare_tau(GrQ,L1,L2,GrQ_SIR,GrQ_community,RCNN,MRCNN)
    Ham_RCNN_tau,Ham_MRCNN_tau,Ham_dc_tau,Ham_ks_tau,Ham_nd_tau,Ham_bc_tau,Ham_vc_tau = Test.compare_tau(Ham,L1,L2,Ham_SIR,Ham_community,RCNN,MRCNN)
    Hep_RCNN_tau,Hep_MRCNN_tau,Hep_dc_tau,Hep_ks_tau,Hep_nd_tau,Hep_bc_tau,Hep_vc_tau = Test.compare_tau(Hep,L1,L2,Hep_SIR,Hep_community,RCNN,MRCNN)
    LastFM_RCNN_tau,LastFM_MRCNN_tau,LastFM_dc_tau,LastFM_ks_tau,LastFM_nd_tau,LastFM_bc_tau,LastFM_vc_tau = Test.compare_tau(LastFM,L1,L2,LastFM_SIR,LastFM_community,RCNN,MRCNN)
    Figeys_RCNN_tau,Figeys_MRCNN_tau,Figeys_dc_tau,Figeys_ks_tau,Figeys_nd_tau,Figeys_bc_tau,Figeys_vc_tau = Test.compare_tau(Figeys,L1,L2,Figeys_SIR,Figeys_community,RCNN,MRCNN)
    Vidal_RCNN_tau,Vidal_MRCNN_tau,Vidal_dc_tau,Vidal_ks_tau,Vidal_nd_tau,Vidal_bc_tau,Vidal_vc_tau = Test.compare_tau(Vidal,L1,L2,Vidal_SIR,Vidal_community,RCNN,MRCNN)
    PowerGrid_RCNN_tau,PowerGrid_MRCNN_tau,PowerGrid_dc_tau,PowerGrid_ks_tau,PowerGrid_nd_tau,PowerGrid_bc_tau,PowerGrid_vc_tau = Test.compare_tau(PowerGrid,L1,L2,PowerGrid_SIR,PowerGrid_community,RCNN,MRCNN)
    Sex_RCNN_tau,Sex_MRCNN_tau,Sex_dc_tau,Sex_ks_tau,Sex_nd_tau,Sex_bc_tau,Sex_vc_tau = Test.compare_tau(Sex,L1,L2,Sex_SIR,Sex_community,RCNN,MRCNN)
    # visualize results
    plt.figure(figsize=(20,17),dpi=120)
    plt.subplot(331)
    plt.plot(a_list,Facebook_RCNN_tau,marker='o',markersize=10,c='b',label='RCNN')
    plt.plot(a_list,Facebook_dc_tau,marker='<',markersize=10,c='fuchsia',label='DC')
    plt.plot(a_list,Facebook_ks_tau,marker='>',markersize=10,c='g',label='K-core')
    plt.plot(a_list,Facebook_nd_tau,marker='p',markersize=10,c='black',label='ND')
    plt.plot(a_list,Facebook_bc_tau,marker='h',markersize=10,c='y',label='BC')
    plt.plot(a_list,Facebook_vc_tau,marker='H',markersize=10,c='orange',label='Vc')
    plt.plot(a_list,Facebook_MRCNN_tau,marker='s',markersize=10,c='r',label='M-RCNN')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.title('Facebook',fontsize=20,fontweight='bold')
    plt.ylabel(r'$\tau$',fontsize=24,fontweight='bold')
    plt.text(0.97,0.94,'(a)',fontsize=16,fontweight='bold')

    plt.subplot(332)
    plt.plot(a_list,LastFM_RCNN_tau,marker='o',markersize=10,c='b',label='RCNN')
    plt.plot(a_list,LastFM_dc_tau,marker='<',markersize=10,c='fuchsia',label='DC')
    plt.plot(a_list,LastFM_ks_tau,marker='>',markersize=10,c='g',label='K-core')
    plt.plot(a_list,LastFM_nd_tau,marker='p',markersize=10,c='black',label='ND')
    plt.plot(a_list,LastFM_bc_tau,marker='h',markersize=10,c='y',label='BC')
    plt.plot(a_list,LastFM_vc_tau,marker='H',markersize=10,c='orange',label='Vc')
    plt.plot(a_list,LastFM_MRCNN_tau,marker='s',markersize=10,c='r',label='M-RCNN')
    plt.title('LastFM',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.97,0.94,'(b)',fontsize=16,fontweight='bold')

    plt.subplot(333)
    plt.plot(a_list,Sex_RCNN_tau,marker='o',markersize=10,c='b',label='RCNN')
    plt.plot(a_list,Sex_dc_tau,marker='<',markersize=10,c='fuchsia',label='DC')
    plt.plot(a_list,Sex_ks_tau,marker='>',markersize=10,c='g',label='K-core')
    plt.plot(a_list,Sex_nd_tau,marker='p',markersize=10,c='black',label='ND')
    plt.plot(a_list,Sex_bc_tau,marker='h',markersize=10,c='y',label='BC')
    plt.plot(a_list,Sex_vc_tau,marker='H',markersize=10,c='orange',label='Vc')
    plt.plot(a_list,Sex_MRCNN_tau,marker='s',markersize=10,c='r',label='M-RCNN')
    plt.title('Sex',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.97,0.94,'(c)',fontsize=16,fontweight='bold')

    plt.subplot(334)
    plt.plot(a_list,Figeys_RCNN_tau,marker='o',markersize=10,c='b',label='RCNN')
    plt.plot(a_list,Figeys_dc_tau,marker='<',markersize=10,c='fuchsia',label='DC')
    plt.plot(a_list,Figeys_ks_tau,marker='>',markersize=10,c='g',label='K-core')
    plt.plot(a_list,Figeys_nd_tau,marker='p',markersize=10,c='black',label='ND')
    plt.plot(a_list,Figeys_bc_tau,marker='h',markersize=10,c='y',label='BC')
    plt.plot(a_list,Figeys_vc_tau,marker='H',markersize=10,c='orange',label='Vc')
    plt.plot(a_list,Figeys_MRCNN_tau,marker='s',markersize=10,c='r',label='M-RCNN')
    plt.ylabel(r'$\tau$',fontsize=24,fontweight='bold')
    plt.title('Figeys',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.97,0.94,'(d)',fontsize=16,fontweight='bold')

    plt.subplot(335)
    plt.plot(a_list,Hep_RCNN_tau,marker='o',markersize=10,c='b',label='RCNN')
    plt.plot(a_list,Hep_dc_tau,marker='<',markersize=10,c='fuchsia',label='DC')
    plt.plot(a_list,Hep_ks_tau,marker='>',markersize=10,c='g',label='K-core')
    plt.plot(a_list,Hep_nd_tau,marker='p',markersize=10,c='black',label='ND')
    plt.plot(a_list,Hep_bc_tau,marker='h',markersize=10,c='y',label='BC')
    plt.plot(a_list,Hep_vc_tau,marker='H',markersize=10,c='orange',label='Vc')
    plt.plot(a_list,Hep_MRCNN_tau,marker='s',markersize=10,c='r',label='M-RCNN')
    plt.title('Hep',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.97,0.94,'(e)',fontsize=16,fontweight='bold')

    plt.subplot(336)
    plt.plot(a_list,Vidal_RCNN_tau,marker='o',markersize=10,c='b',label='RCNN')
    plt.plot(a_list,Vidal_dc_tau,marker='<',markersize=10,c='fuchsia',label='DC')
    plt.plot(a_list,Vidal_ks_tau,marker='>',markersize=10,c='g',label='K-core')
    plt.plot(a_list,Vidal_nd_tau,marker='p',markersize=10,c='black',label='ND')
    plt.plot(a_list,Vidal_bc_tau,marker='h',markersize=10,c='y',label='BC')
    plt.plot(a_list,Vidal_vc_tau,marker='H',markersize=10,c='orange',label='Vc')
    plt.plot(a_list,Vidal_MRCNN_tau,marker='s',markersize=10,c='r',label='M-RCNN')
    plt.title('Vidal',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.97,0.94,'(f)',fontsize=16,fontweight='bold')

    plt.subplot(337)
    plt.plot(a_list,GrQ_RCNN_tau,marker='o',markersize=10,c='b',label='RCNN')
    plt.plot(a_list,GrQ_dc_tau,marker='<',markersize=10,c='fuchsia',label='DC')
    plt.plot(a_list,GrQ_ks_tau,marker='>',markersize=10,c='g',label='K-core')
    plt.plot(a_list,GrQ_nd_tau,marker='p',markersize=10,c='black',label='ND')
    plt.plot(a_list,GrQ_bc_tau,marker='h',markersize=10,c='y',label='BC')
    plt.plot(a_list,GrQ_vc_tau,marker='H',markersize=10,c='orange',label='Vc')
    plt.plot(a_list,GrQ_MRCNN_tau,marker='s',markersize=10,c='r',label='M-RCNN')
    plt.title('GrQC',fontsize=20,fontweight='bold')
    plt.ylabel(r'$\tau$',fontsize=24,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.xlabel(r'$β/β_{th}$',fontsize=20,fontweight='bold')
    plt.text(0.97,0.94,'(g)',fontsize=16,fontweight='bold')

    plt.subplot(338)
    plt.plot(a_list,Ham_RCNN_tau,marker='o',markersize=10,c='b',label='RCNN')
    plt.plot(a_list,Ham_dc_tau,marker='<',markersize=10,c='fuchsia',label='DC')
    plt.plot(a_list,Ham_ks_tau,marker='>',markersize=10,c='g',label='K-core')
    plt.plot(a_list,Ham_nd_tau,marker='p',markersize=10,c='black',label='ND')
    plt.plot(a_list,Ham_bc_tau,marker='h',markersize=10,c='y',label='BC')
    plt.plot(a_list,Ham_vc_tau,marker='H',markersize=10,c='orange',label='Vc')
    plt.plot(a_list,Ham_MRCNN_tau,marker='s',markersize=10,c='r',label='M-RCNN')
    plt.title('Hamster',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.xlabel(r'$β/β_{th}$',fontsize=20,fontweight='bold')
    plt.text(0.97,0.94,'(h)',fontsize=16,fontweight='bold')

    plt.subplot(339)
    plt.plot(a_list,PowerGrid_RCNN_tau,marker='o',markersize=10,c='b',label='RCNN')
    plt.plot(a_list,PowerGrid_dc_tau,marker='<',markersize=10,c='fuchsia',label='DC')
    plt.plot(a_list,PowerGrid_ks_tau,marker='>',markersize=10,c='g',label='K-core')
    plt.plot(a_list,PowerGrid_nd_tau,marker='p',markersize=10,c='black',label='ND')
    plt.plot(a_list,PowerGrid_bc_tau,marker='h',markersize=10,c='y',label='BC')
    plt.plot(a_list,PowerGrid_vc_tau,marker='H',markersize=10,c='orange',label='Vc')
    plt.plot(a_list,PowerGrid_MRCNN_tau,marker='s',markersize=10,c='r',label='M-RCNN')
    plt.title('PowerGrid',fontsize=20,fontweight='bold')
    plt.xlabel(r'$β/β_{th}$',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.97,0.94,'(i)',fontsize=16,fontweight='bold')
    plt.tight_layout()
    plt.legend(bbox_to_anchor=(0.4,-0.15),ncol=7,fontsize=18)
    plt.show()

    # In[4] Experiment 2: Impact of the size of neighborhood networks 
    # train models based different L
    L_list = [4,8,16,28,32,40,48,56,64]
    MRCNN_model_list = Utils.compare_L(BA_1000_4,BA_1000_4_label,BA_1000_4_community,L_list)
    Facebook_MRCNN_tau4_list,Facebook_MRCNN_tau4 = Test.compare_tau1(Facebook,4,Facebook_SIR,Facebook_community,MRCNN_model_list[0],p=0.1)
    GrQ_MRCNN_tau4_list,GrQ_MRCNN_tau4 = Test.compare_tau1(GrQ,4,GrQ_SIR,GrQ_community,MRCNN_model_list[0],p=0.1)
    Ham_MRCNN_tau4_list,Ham_MRCNN_tau4 = Test.compare_tau1(Ham,4,Ham_SIR,Ham_community,MRCNN_model_list[0],p=0.1)
    Hep_MRCNN_tau4_list,Hep_MRCNN_tau4 = Test.compare_tau1(Hep,4,Hep_SIR,Hep_community,MRCNN_model_list[0],p=0.1)
    LastFM_MRCNN_tau4_list,LastFM_MRCNN_tau4 = Test.compare_tau1(LastFM,4,LastFM_SIR,LastFM_community,MRCNN_model_list[0],p=0.1)
    Figeys_MRCNN_tau4_list,Figeys_MRCNN_tau4 = Test.compare_tau1(Figeys,4,Figeys_SIR,Figeys_community,MRCNN_model_list[0],p=0.1)
    Vidal_MRCNN_tau4_list,Vidal_MRCNN_tau4 = Test.compare_tau1(Vidal,4,Vidal_SIR,Vidal_community,MRCNN_model_list[0],p=0.1)
    PowerGrid_MRCNN_tau4_list,PowerGrid_MRCNN_tau4 = Test.compare_tau1(PowerGrid,4,PowerGrid_SIR,PowerGrid_community,MRCNN_model_list[0],p=0.1)
    Sex_MRCNN_tau4_list,Sex_MRCNN_tau4 = Test.compare_tau1(Sex,4,Sex_SIR,Sex_community,MRCNN_model_list[0],p=0.1)
    
    Facebook_MRCNN_tau8_list,Facebook_MRCNN_tau8 = Test.compare_tau1(Facebook,8,Facebook_SIR,Facebook_community,MRCNN_model_list[1],p=0.1)
    GrQ_MRCNN_tau8_list,GrQ_MRCNN_tau8 = Test.compare_tau1(GrQ,8,GrQ_SIR,GrQ_community,MRCNN_model_list[1],p=0.1)
    Ham_MRCNN_tau8_list,Ham_MRCNN_tau8 = Test.compare_tau1(Ham,8,Ham_SIR,Ham_community,MRCNN_model_list[1],p=0.1)
    Hep_MRCNN_tau8_list,Hep_MRCNN_tau8 = Test.compare_tau1(Hep,8,Hep_SIR,Hep_community,MRCNN_model_list[1],p=0.1)
    LastFM_MRCNN_tau8_list,LastFM_MRCNN_tau8 = Test.compare_tau1(LastFM,8,LastFM_SIR,LastFM_community,MRCNN_model_list[1],p=0.1)
    Figeys_MRCNN_tau8_list,Figeys_MRCNN_tau8 = Test.compare_tau1(Figeys,8,Figeys_SIR,Figeys_community,MRCNN_model_list[1],p=0.1)
    Vidal_MRCNN_tau8_list,Vidal_MRCNN_tau8 = Test.compare_tau1(Vidal,8,Vidal_SIR,Vidal_community,MRCNN_model_list[1],p=0.1)
    PowerGrid_MRCNN_tau8_list,PowerGrid_MRCNN_tau8 = Test.compare_tau1(PowerGrid,8,PowerGrid_SIR,PowerGrid_community,MRCNN_model_list[1],p=0.1)
    Sex_MRCNN_tau8_list,Sex_MRCNN_tau8 = Test.compare_tau1(Sex,8,Sex_SIR,Sex_community,MRCNN_model_list[1],p=0.1)
    
    Facebook_MRCNN_tau16_list,Facebook_MRCNN_tau16 = Test.compare_tau1(Facebook,16,Facebook_SIR,Facebook_community,MRCNN_model_list[3],p=0.1)
    GrQ_MRCNN_tau16_list,GrQ_MRCNN_tau16 = Test.compare_tau1(GrQ,16,GrQ_SIR,GrQ_community,MRCNN_model_list[3],p=0.1)
    Ham_MRCNN_tau16_list,Ham_MRCNN_tau16 = Test.compare_tau1(Ham,16,Ham_SIR,Ham_community,MRCNN_model_list[3],p=0.1)
    Hep_MRCNN_tau16_list,Hep_MRCNN_tau16 = Test.compare_tau1(Hep,16,Hep_SIR,Hep_community,MRCNN_model_list[3],p=0.1)
    LastFM_MRCNN_tau16_list,LastFM_MRCNN_tau16 = Test.compare_tau1(LastFM,16,LastFM_SIR,LastFM_community,MRCNN_model_list[3],p=0.1)
    Figeys_MRCNN_tau16_list,Figeys_MRCNN_tau16 = Test.compare_tau1(Figeys,16,Figeys_SIR,Figeys_community,MRCNN_model_list[3],p=0.1)
    Vidal_MRCNN_tau16_list,Vidal_MRCNN_tau16 = Test.compare_tau1(Vidal,16,Vidal_SIR,Vidal_community,MRCNN_model_list[3],p=0.1)
    PowerGrid_MRCNN_tau16_list,PowerGrid_MRCNN_tau16 = Test.compare_tau1(PowerGrid,16,PowerGrid_SIR,PowerGrid_community,MRCNN_model_list[3],p=0.1)
    Sex_MRCNN_tau16_list,Sex_MRCNN_tau16 = Test.compare_tau1(Sex,16,Sex_SIR,Sex_community,MRCNN_model_list[3],p=0.1)
    
    Facebook_MRCNN_tau28_list,Facebook_MRCNN_tau28 = Test.compare_tau1(Facebook,28,Facebook_SIR,Facebook_community,MRCNN_model_list[4],p=0.1)
    GrQ_MRCNN_tau28_list,GrQ_MRCNN_tau28 = Test.compare_tau1(GrQ,28,GrQ_SIR,GrQ_community,MRCNN_model_list[4],p=0.1)
    Ham_MRCNN_tau28_list,Ham_MRCNN_tau28 = Test.compare_tau1(Ham,28,Ham_SIR,Ham_community,MRCNN_model_list[4],p=0.1)
    Hep_MRCNN_tau28_list,Hep_MRCNN_tau28 = Test.compare_tau1(Hep,28,Hep_SIR,Hep_community,MRCNN_model_list[4],p=0.1)
    LastFM_MRCNN_tau28_list,LastFM_MRCNN_tau28 = Test.compare_tau1(LastFM,28,LastFM_SIR,LastFM_community,MRCNN_model_list[4],p=0.1)
    Figeys_MRCNN_tau28_list,Figeys_MRCNN_tau28 = Test.compare_tau1(Figeys,28,Figeys_SIR,Figeys_community,MRCNN_model_list[4],p=0.1)
    Vidal_MRCNN_tau28_list,Vidal_MRCNN_tau28 = Test.compare_tau1(Vidal,28,Vidal_SIR,Vidal_community,MRCNN_model_list[4],p=0.1)
    PowerGrid_MRCNN_tau28_list,PowerGrid_MRCNN_tau28 = Test.compare_tau1(PowerGrid,28,PowerGrid_SIR,PowerGrid_community,MRCNN_model_list[4],p=0.1)
    Sex_MRCNN_tau28_list,Sex_MRCNN_tau28 = Test.compare_tau1(Sex,28,Sex_SIR,Sex_community,MRCNN_model_list[4],p=0.1)
    
    Facebook_MRCNN_tau32_list,Facebook_MRCNN_tau32 = Test.compare_tau1(Facebook,32,Facebook_SIR,Facebook_community,MRCNN_model_list[5],p=0.1)
    GrQ_MRCNN_tau32_list,GrQ_MRCNN_tau32 = Test.compare_tau1(GrQ,32,GrQ_SIR,GrQ_community,MRCNN_model_list[5],p=0.1)
    Ham_MRCNN_tau32_list,Ham_MRCNN_tau32 = Test.compare_tau1(Ham,32,Ham_SIR,Ham_community,MRCNN_model_list[5],p=0.1)
    Hep_MRCNN_tau32_list,Hep_MRCNN_tau32 = Test.compare_tau1(Hep,32,Hep_SIR,Hep_community,MRCNN_model_list[5],p=0.1)
    LastFM_MRCNN_tau32_list,LastFM_MRCNN_tau32 = Test.compare_tau1(LastFM,32,LastFM_SIR,LastFM_community,MRCNN_model_list[5],p=0.1)
    Figeys_MRCNN_tau32_list,Figeys_MRCNN_tau32 = Test.compare_tau1(Figeys,32,Figeys_SIR,Figeys_community,MRCNN_model_list[5],p=0.1)
    Vidal_MRCNN_tau32_list,Vidal_MRCNN_tau32 = Test.compare_tau1(Vidal,32,Vidal_SIR,Vidal_community,MRCNN_model_list[5],p=0.1)
    Sex_MRCNN_tau32_list,Sex_MRCNN_tau32 = Test.compare_tau1(Sex,32,Sex_SIR,Sex_community,MRCNN_model_list[5],p=0.1)
    PowerGrid_MRCNN_tau32_list,PowerGrid_MRCNN_tau32 = Test.compare_tau1(PowerGrid,32,PowerGrid_SIR,PowerGrid_community,MRCNN_model_list[5],p=0.1)
    
    
    Facebook_MRCNN_tau40_list,Facebook_MRCNN_tau40 = Test.compare_tau1(Facebook,40,Facebook_SIR,Facebook_community,MRCNN_model_list[6],p=0.1)
    GrQ_MRCNN_tau40_list,GrQ_MRCNN_tau40 = Test.compare_tau1(GrQ,40,GrQ_SIR,GrQ_community,MRCNN_model_list[6],p=0.1)
    Ham_MRCNN_tau40_list,Ham_MRCNN_tau40 = Test.compare_tau1(Ham,40,Ham_SIR,Ham_community,MRCNN_model_list[6],p=0.1)
    Hep_MRCNN_tau40_list,Hep_MRCNN_tau40 = Test.compare_tau1(Hep,40,Hep_SIR,Hep_community,MRCNN_model_list[6],p=0.1)
    LastFM_MRCNN_tau40_list,LastFM_MRCNN_tau40 = Test.compare_tau1(LastFM,40,LastFM_SIR,LastFM_community,MRCNN_model_list[6],p=0.1)
    Figeys_MRCNN_tau40_list,Figeys_MRCNN_tau40 = Test.compare_tau1(Figeys,40,Figeys_SIR,Figeys_community,MRCNN_model_list[6],p=0.1)
    Vidal_MRCNN_tau40_list,Vidal_MRCNN_tau40 = Test.compare_tau1(Vidal,40,Vidal_SIR,Vidal_community,MRCNN_model_list[6],p=0.1)
    PowerGrid_MRCNN_tau40_list,PowerGrid_MRCNN_tau40 = Test.compare_tau1(PowerGrid,40,PowerGrid_SIR,PowerGrid_community,MRCNN_model_list[6],p=0.1)
    Sex_MRCNN_tau40_list,Sex_MRCNN_tau40 = Test.compare_tau1(Sex,40,Sex_SIR,Sex_community,MRCNN_model_list[6],p=0.1)
    
    Facebook_MRCNN_tau48_list,Facebook_MRCNN_tau48 = Test.compare_tau1(Facebook,48,Facebook_SIR,Facebook_community,MRCNN_model_list[7],p=0.1)
    GrQ_MRCNN_tau48_list,GrQ_MRCNN_tau48 = Test.compare_tau1(GrQ,48,GrQ_SIR,GrQ_community,MRCNN_model_list[7],p=0.1)
    Ham_MRCNN_tau48_list,Ham_MRCNN_tau48 = Test.compare_tau1(Ham,48,Ham_SIR,Ham_community,MRCNN_model_list[7],p=0.1)
    Hep_MRCNN_tau48_list,Hep_MRCNN_tau48 = Test.compare_tau1(Hep,48,Hep_SIR,Hep_community,MRCNN_model_list[7],p=0.1)
    LastFM_MRCNN_tau48_list,LastFM_MRCNN_tau48 = Test.compare_tau1(LastFM,48,LastFM_SIR,LastFM_community,MRCNN_model_list[7],p=0.1)
    Figeys_MRCNN_tau48_list,Figeys_MRCNN_tau48 = Test.compare_tau1(Figeys,48,Figeys_SIR,Figeys_community,MRCNN_model_list[7],p=0.1)
    Vidal_MRCNN_tau48_list,Vidal_MRCNN_tau48 = Test.compare_tau1(Vidal,48,Vidal_SIR,Vidal_community,MRCNN_model_list[7],p=0.1)
    PowerGrid_MRCNN_tau48_list,PowerGrid_MRCNN_tau48 = Test.compare_tau1(PowerGrid,48,PowerGrid_SIR,PowerGrid_community,MRCNN_model_list[7],p=0.1)
    Sex_MRCNN_tau48_list,Sex_MRCNN_tau48 = Test.compare_tau1(Sex,48,Sex_SIR,Sex_community,MRCNN_model_list[7],p=0.1)
    
    Facebook_MRCNN_tau56_list,Facebook_MRCNN_tau56 = Test.compare_tau1(Facebook,56,Facebook_SIR,Facebook_community,MRCNN_model_list[8],p=0.1)
    GrQ_MRCNN_tau56_list,GrQ_MRCNN_tau56 = Test.compare_tau1(GrQ,56,GrQ_SIR,GrQ_community,MRCNN_model_list[8],p=0.1)
    Ham_MRCNN_tau56_list,Ham_MRCNN_tau56 = Test.compare_tau1(Ham,56,Ham_SIR,Ham_community,MRCNN_model_list[8],p=0.1)
    Hep_MRCNN_tau56_list,Hep_MRCNN_tau56 = Test.compare_tau1(Hep,56,Hep_SIR,Hep_community,MRCNN_model_list[8],p=0.1)
    LastFM_MRCNN_tau56_list,LastFM_MRCNN_tau56 = Test.compare_tau1(LastFM,56,LastFM_SIR,LastFM_community,MRCNN_model_list[8],p=0.1)
    Figeys_MRCNN_tau56_list,Figeys_MRCNN_tau56 = Test.compare_tau1(Figeys,56,Figeys_SIR,Figeys_community,MRCNN_model_list[8],p=0.1)
    Vidal_MRCNN_tau56_list,Vidal_MRCNN_tau56 = Test.compare_tau1(Vidal,56,Vidal_SIR,Vidal_community,MRCNN_model_list[8],p=0.1)
    PowerGrid_MRCNN_tau56_list,PowerGrid_MRCNN_tau56 = Test.compare_tau1(PowerGrid,56,PowerGrid_SIR,PowerGrid_community,MRCNN_model_list[8],p=0.1)
    Sex_MRCNN_tau56_list,Sex_MRCNN_tau56 = Test.compare_tau1(Sex,56,Sex_SIR,Sex_community,MRCNN_model_list[8],p=0.1)
    
    Facebook_MRCNN_tau64_list,Facebook_MRCNN_tau64 = Test.compare_tau1(Facebook,64,Facebook_SIR,Facebook_community,MRCNN_model_list[9],p=0.1)
    GrQ_MRCNN_tau64_list,GrQ_MRCNN_tau64 = Test.compare_tau1(GrQ,64,GrQ_SIR,GrQ_community,MRCNN_model_list[9],p=0.1)
    Ham_MRCNN_tau64_list,Ham_MRCNN_tau64 = Test.compare_tau1(Ham,64,Ham_SIR,Ham_community,MRCNN_model_list[9],p=0.1)
    Hep_MRCNN_tau64_list,Hep_MRCNN_tau64 = Test.compare_tau1(Hep,64,Hep_SIR,Hep_community,MRCNN_model_list[9],p=0.1)
    LastFM_MRCNN_tau64_list,LastFM_MRCNN_tau64 = Test.compare_tau1(LastFM,64,LastFM_SIR,LastFM_community,MRCNN_model_list[9],p=0.1)
    Figeys_MRCNN_tau64_list,Figeys_MRCNN_tau64 = Test.compare_tau1(Figeys,64,Figeys_SIR,Figeys_community,MRCNN_model_list[9],p=0.1)
    Vidal_MRCNN_tau64_list,Vidal_MRCNN_tau64 = Test.compare_tau1(Vidal,64,Vidal_SIR,Vidal_community,MRCNN_model_list[9],p=0.1)
    PowerGrid_MRCNN_tau64_list,PowerGrid_MRCNN_tau64 = Test.compare_tau1(PowerGrid,64,PowerGrid_SIR,PowerGrid_community,MRCNN_model_list[9],p=0.1)
    Sex_MRCNN_tau64_list,Sex_MRCNN_tau64 = Test.compare_tau1(Sex,64,Sex_SIR,Sex_community,MRCNN_model_list[9],p=0.1)
    
    L_all = pd.DataFrame({'L':L_list
                ,'Facebook':[Facebook_MRCNN_tau4,Facebook_MRCNN_tau8,Facebook_MRCNN_tau16,Facebook_MRCNN_tau28,Facebook_MRCNN_tau32,Facebook_MRCNN_tau40,Facebook_MRCNN_tau48,Facebook_MRCNN_tau56,Facebook_MRCNN_tau64]
                ,'GrQ':[GrQ_MRCNN_tau4,GrQ_MRCNN_tau8,GrQ_MRCNN_tau16,GrQ_MRCNN_tau28,GrQ_MRCNN_tau32,GrQ_MRCNN_tau40,GrQ_MRCNN_tau48,GrQ_MRCNN_tau56,GrQ_MRCNN_tau64]
                ,'Ham':[Ham_MRCNN_tau4,Ham_MRCNN_tau8,Ham_MRCNN_tau16,Ham_MRCNN_tau28,Ham_MRCNN_tau32,Ham_MRCNN_tau40,Ham_MRCNN_tau48,Ham_MRCNN_tau56,Ham_MRCNN_tau64]
                ,'Hep':[Hep_MRCNN_tau4,Hep_MRCNN_tau8,Hep_MRCNN_tau16,Hep_MRCNN_tau28,Hep_MRCNN_tau32,Hep_MRCNN_tau40,Hep_MRCNN_tau48,Hep_MRCNN_tau56,Hep_MRCNN_tau64]
                ,'LastFM':[LastFM_MRCNN_tau4,LastFM_MRCNN_tau8,LastFM_MRCNN_tau16,LastFM_MRCNN_tau28,LastFM_MRCNN_tau32,LastFM_MRCNN_tau40,LastFM_MRCNN_tau48,LastFM_MRCNN_tau56,LastFM_MRCNN_tau64]
                ,'Vidal':[Vidal_MRCNN_tau4,Vidal_MRCNN_tau8,Vidal_MRCNN_tau16,Vidal_MRCNN_tau28,Vidal_MRCNN_tau32,Vidal_MRCNN_tau40,Vidal_MRCNN_tau48,Vidal_MRCNN_tau56,Vidal_MRCNN_tau64]
                ,'PowerGrid':[PowerGrid_MRCNN_tau4,PowerGrid_MRCNN_tau8,PowerGrid_MRCNN_tau16,PowerGrid_MRCNN_tau28,PowerGrid_MRCNN_tau32,PowerGrid_MRCNN_tau40,PowerGrid_MRCNN_tau48,PowerGrid_MRCNN_tau56,PowerGrid_MRCNN_tau64]
                ,'Sex':[Sex_MRCNN_tau4,Sex_MRCNN_tau8,Sex_MRCNN_tau16,Sex_MRCNN_tau28,Sex_MRCNN_tau32,Sex_MRCNN_tau40,Sex_MRCNN_tau48,Sex_MRCNN_tau56,Sex_MRCNN_tau64]})

    # visualize results
    plt.figure(figsize=(12,5),dpi=120)

    plt.subplot(121)
    plt.plot(L_all['L'],L_all['Facebook'],marker='o',markersize=8,c='r',label=r'Facebook($G_{C_V}$%=100,$G_{C_E}$%=100)')
    plt.plot(L_all['L'],L_all['LastFM'],marker='s',markersize=8,c='fuchsia',label=r'LastFM($G_{C_V}$%=100,$G_{C_E}$%=100)')
    plt.plot(L_all['L'],L_all['Sex'],marker='<',markersize=8,c='b',label=r'Sex($G_{C_V}$%=100,$G_{C_E}$%=100)')
    plt.plot(L_all['L'],L_all['PowerGrid'],marker='>',markersize=8,c='brown',label=r'PowerGrid($G_{C_V}$%=100,$G_{C_E}$%=100)')
    plt.ylabel(r'$\overline{\tau}$',fontsize=16,fontweight='bold')
    plt.xlabel(r'$L$',fontsize=16,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=12)
    plt.xticks(np.arange(4,68,8),fontsize=12)
    plt.text(3,0.94,'(a)',fontsize=14,fontweight='bold')
    plt.legend(loc='best')

    plt.subplot(122)
    plt.plot(L_all['L'],L_all['Figeys'],marker='>',markersize=8,c='black',label=r'Figeys($G_{C_V}$%=99.01,$G_{C_E}$%=99.78)')
    plt.plot(L_all['L'],L_all['Hep'],marker='o',markersize=8,c='g',label=r'Hep($G_{C_V}$%=87.46,$G_{C_E}$%=95.51)')
    plt.plot(L_all['L'],L_all['Vidal'],marker='s',markersize=8,c='gold',label=r'Vidal($G_{C_V}$%=88.83,$G_{C_E}$%=97.96)')
    plt.plot(L_all['L'],L_all['GrQ'],marker='<',markersize=8,c='tomato',label=r'GrQC($G_{C_V}$%=79.32,$G_{C_E}$%=92.67)')
    plt.plot(L_all['L'],L_all['Ham'],marker='h',markersize=8,c='navy',label=r'Hamster($G_{C_V}$%=82.44,$G_{C_E}$%=96.80)')

    plt.xlabel(r'$L$',fontsize=16,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=12)
    plt.xticks(np.arange(4,68,8),fontsize=12)
    plt.text(3,0.94,'(b)',fontsize=14,fontweight='bold')
    plt.legend(loc='best')
    plt.tight_layout()
    plt.show()

    # Performance of M-RCNN when L=4
    plt.figure(figsize=(12,5.5),dpi=120)
    plt.plot(a_list,GrQ_RCNN_tau,marker='o',markersize=10,c='b',label='RCNN')
    plt.plot(a_list,GrQ_dc_tau,marker='<',markersize=10,c='fuchsia',label='DC')
    plt.plot(a_list,GrQ_ks_tau,marker='>',markersize=10,c='g',label='K-core')
    plt.plot(a_list,GrQ_nd_tau,marker='p',markersize=10,c='black',label='ND')
    plt.plot(a_list,GrQ_bc_tau,marker='h',markersize=10,c='y',label='BC')
    plt.plot(a_list,GrQC_vc_tau,marker='H',markersize=10,c='orange',label='Vc')
    plt.plot(a_list,GrQ_MRCNN_tau4_list,marker='s',markersize=10,c='r',label='M-RCNN')
    plt.title('GrQC',fontsize=20,fontweight='bold')
    plt.ylabel(r'$\tau$',fontsize=24,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.xlabel(r'$β/β_{th}$',fontsize=20,fontweight='bold')
    plt.text(0.97,0.94,'(g)',fontsize=16,fontweight='bold')

    plt.subplot(339)
    plt.plot(a_list,PowerGrid_RCNN_tau,marker='o',markersize=10,c='b',label='RCNN')
    plt.plot(a_list,PowerGrid_dc_tau,marker='<',markersize=10,c='fuchsia',label='DC')
    plt.plot(a_list,PowerGrid_ks_tau,marker='>',markersize=10,c='g',label='K-core')
    plt.plot(a_list,PowerGrid_nd_tau,marker='p',markersize=10,c='black',label='ND')
    plt.plot(a_list,PowerGrid_bc_tau,marker='h',markersize=10,c='y',label='BC')
    plt.plot(a_list,PowerGrid_vc_tau,marker='H',markersize=10,c='orange',label='Vc')
    plt.plot(a_list,PowerGrid_tau4_list,marker='s',markersize=10,c='r',label='M-RCNN')
    plt.title('PowerGrid',fontsize=20,fontweight='bold')
    plt.xlabel(r'$β/β_{th}$',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,1.1,0.2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.97,0.94,'(i)',fontsize=16,fontweight='bold')
    plt.tight_layout()
    plt.legend(bbox_to_anchor=(0.4,-0.15),ncol=7,fontsize=18)
    plt.show()

    # In[5] Experiment 3: Two-channel M-RCNN
    Facebook_improve_com = Test.calculate_improve(Facebook,L1,L2,Facebook_SIR,Facebook_community,RCNN,MRCNN_com,method='community')
    Facebook_improve_shell = Test.calculate_improve(Facebook,L1,L2,Facebook_SIR,Facebook_community,RCNN,MRCNN_com,method='shell')

    LastFM_improve_com = Test.calculate_improve(LastFM,L1,L2,LastFM_SIR,LastFM_community,RCNN,MRCNN_com,method='community')
    LastFM_improve_shell = Test.calculate_improve(LastFM,L1,L2,LastFM_SIR,LastFM_community,RCNN,MRCNN_com,method='shell')

    Sex_improve_com = Test.calculate_improve(Sex,L1,L2,Sex_SIR,Sex_community,RCNN,MRCNN_com,method='community')
    Sex_improve_shell = Test.calculate_improve(Sex,L1,L2,Sex_SIR,Sex_community,RCNN,MRCNN_com,method='shell')

    Hep_improve_com = Test.calculate_improve(Hep,L1,L2,Hep_SIR,Hep_community,RCNN,MRCNN_com,method='community')
    Hep_improve_shell = Test.calculate_improve(Hep,L1,L2,Hep_SIR,Hep_community,RCNN,MRCNN_com,method='shell')

    Ham_improve_com = Test.calculate_improve(Ham,L1,L2,Ham_SIR,Ham_community,RCNN,MRCNN_com,method='community')
    Ham_improve_shell = Test.calculate_improve(Ham,L1,L2,Ham_SIR,Ham_community,RCNN,MRCNN_com,method='shell')

    Vidal_improve_com = Test.calculate_improve(Vidal,L1,L2,Vidal_SIR,Vidal_community,RCNN,MRCNN_com,method='community')
    Vidal_improve_shell = Test.calculate_improve(Vidal,L1,L2,Vidal_SIR,Vidal_community,RCNN,MRCNN_com,method='shell')

    PowerGrid_improve_com = Test.calculate_improve(PowerGrid,L1,L2,PowerGrid_SIR,PowerGrid_community,RCNN,MRCNN_com,method='community')
    PowerGrid_improve_shell = Test.calculate_improve(PowerGrid,L1,L2,PowerGrid_SIR,PowerGrid_community,RCNN,MRCNN_com,method='shell')

    GrQ_improve_com = Test.calculate_improve(GrQ,L1,L2,GrQ_SIR,GrQ_community,RCNN,MRCNN_com,method='community')
    GrQ_improve_shell = Test.calculate_improve(GrQ,L1,L2,GrQ_SIR,GrQ_community,RCNN,MRCNN_com,method='shell')

    Figeys_improve_com = Test.calculate_improve(Figeys,L1,L2,Figeys_SIR,Figeys_community,RCNN,MRCNN_com,method='community')
    Figeys_improve_shell = Test.calculate_improve(Figeys,L1,L2,Figeys_SIR,Figeys_community,RCNN,MRCNN_com,method='shell')


    # visualize results:

    plt.subplot(331)
    plt.plot(a_list,Facebook_improve_com,marker='v',markersize=10,c='darkgreen',label='M-RCNN(ND+N_Com)')
    plt.plot(a_list,Facebook_improve_shell,marker='^',markersize=10,c='darkred',label='M-RCNN(ND+K-Shell)')
    plt.yticks(np.arange(0,12,2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.title('Facebook',fontsize=20,fontweight='bold')
    plt.ylabel(r'$Improvement$ $ratio(\tau) \%$',fontsize=20,fontweight='bold')
    plt.text(0.98,9.2,'(a)',fontsize=16,fontweight='bold')

    plt.subplot(332)
    plt.plot(a_list,LastFM_improve_com,marker='v',markersize=10,c='darkgreen',label='M-RCNN(ND+N_Com)')
    plt.plot(a_list,LastFM_improve_shell,marker='^',markersize=10,c='darkred',label='M-RCNN(ND+K-Shell)')
    plt.title('LastFM',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,10,2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.98,7.4,'(b)',fontsize=16,fontweight='bold')

    plt.subplot(333)
    plt.plot(a_list,Sex_improve_com,marker='v',markersize=10,c='darkgreen',label='M-RCNN(ND+N_Com)')
    plt.plot(a_list,Sex_improve_shell,marker='^',markersize=10,c='darkred',label='M-RCNN(ND+K-Shell)')
    plt.title('Sex',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,10,2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.98,7.4,'(c)',fontsize=16,fontweight='bold')

    plt.subplot(334)
    plt.plot(a_list,Figeys_improve_com,marker='v',markersize=10,c='darkgreen',label='M-RCNN(ND+N_Com)')
    plt.plot(a_list,Figeys_improve_shell,marker='^',markersize=10,c='darkred',label='M-RCNN(ND+K-Shell)')
    plt.ylabel(r'$Improvement$ $ratio(\tau) \% $',fontsize=20,fontweight='bold')
    plt.title('Figeys',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,25,5),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.98,20.5,'(d)',fontsize=16,fontweight='bold')

    plt.subplot(335)
    plt.plot(a_list,Hep_improve_com,marker='v',markersize=10,c='darkgreen',label='M-RCNN(ND+N_Com)')
    plt.plot(a_list,Hep_improve_shell,marker='^',markersize=10,c='darkred',label='M-RCNN(ND+K-Shell)')
    plt.title('Hep',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(0,10,2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.98,7.4,'(e)',fontsize=16,fontweight='bold')

    plt.subplot(336)
    plt.plot(a_list,Vidal_improve_com,marker='v',markersize=10,c='darkgreen',label='M-RCNN(ND+N_Com)')
    plt.plot(a_list,Vidal_improve_shell,marker='^',markersize=10,c='darkred',label='M-RCNN(ND+K-Shell)')
    plt.title('Vidal',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(-2,10,2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.98,7.25,'(f)',fontsize=16,fontweight='bold')

    plt.subplot(337)
    plt.plot(a_list,GrQ_improve_com,marker='v',markersize=10,c='darkgreen',label='M-RCNN(ND+N_Com)')
    plt.plot(a_list,GrQ_improve_shell,marker='^',markersize=10,c='darkred',label='M-RCNN(ND+K-Shell)')
    plt.title('GrQC',fontsize=20,fontweight='bold')
    plt.ylabel(r'$Improvement$ $ratio(\tau)\%$',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(-10,10,2),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.xlabel(r'$β/β_{th}$',fontsize=24,fontweight='bold')
    plt.text(0.98,6.6,'(g)',fontsize=16,fontweight='bold')


    plt.subplot(338)
    plt.plot(a_list,Ham_improve_com,marker='v',markersize=10,c='darkgreen',label='M-RCNN(ND+N_Com)')
    plt.plot(a_list,Ham_improve_shell,marker='^',markersize=10,c='darkred',label='M-RCNN(ND+K-Shell)')
    plt.title('Hamster',fontsize=20,fontweight='bold')
    plt.yticks(np.arange(-1,2.5,1),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.xlabel(r'$β/β_{th}$',fontsize=24,fontweight='bold')
    plt.text(0.98,1.9,'(h)',fontsize=16,fontweight='bold')

    plt.subplot(339)
    plt.plot(a_list,PowerGrid_improve_com,marker='v',markersize=10,c='darkgreen',label='M-RCNN(ND+N_Com)')
    plt.plot(a_list,PowerGrid_improve_shell,marker='^',markersize=10,c='darkred',label='M-RCNN(ND+K-Shell)')
    plt.title('PowerGrid',fontsize=20,fontweight='bold')
    plt.xlabel(r'$β/β_{th}$',fontsize=24,fontweight='bold')
    plt.yticks(np.arange(0,80,10),fontsize=18)
    plt.xticks(np.arange(1,2,0.3),fontsize=18)
    plt.text(0.98,68,'(i)',fontsize=16,fontweight='bold')
    plt.tight_layout()
    plt.legend(bbox_to_anchor=(0.04,-0.2),ncol=2,fontsize=18)
    plt.show()
    
    # In[6] Experiment 4: Node ranking similarity and discrimination ability
    Facebook_sim = Test.calculate_similarity(Facebook,L1,L2,Facebook_SIR[4],Facebook_community,RCNN,MRCNN)
    LastFM_sim = Test.calculate_similarity(LastFM,L1,L2,LastFM_SIR[4],LastFM_community,RCNN,MRCNN)
    Sex_sim = Test.calculate_similarity(Sex,L1,L2,Sex_SIR[4],Sex_community,RCNN,MRCNN)
    Figeys_sim = Test.calculate_similarity(Figeys,L1,L2,Figeys_SIR[4],Figeys_community,RCNN,MRCNN)
    Hep_sim = Test.calculate_similarity(Hep,L1,L2,Hep_SIR[4],Hep_community,RCNN,MRCNN)
    Vidal_sim = Test.calculate_similarity(Vidal,L1,L2,Vidal_SIR[4],Vidal_community,RCNN,MRCNN)
    GrQ_sim = Test.calculate_similarity(GrQc,L1,L2,GrQ_SIR[4],GrQ_community,RCNN,MRCNN_model_list[0])
    Ham_sim = Test.calculate_similarity(Hamster,L1,L2,Ham_SIR[4],Ham_community,RCNN,MRCNN)
    PowerGrid_sim = Test.calculate_similarity(PowerGrid,L1,L2,PowerGrid_SIR[4],PowerGrid_community,RCNN,MRCNN_model_list[0])

    # normalize
    Facebook_sim = Utils.normalization(Facebook_sim)
    LastFM_sim = Utils.normalization(LastFM_sim)
    Ham_sim = Utils.normalization(Ham_sim)
    Sex_sim = Utils.normalization(Sex_sim)
    Hep_sim = Utils.normalization(Hep_sim)
    Vidal_sim = Utils.normalization(Vidal_sim)
    PowerGrid_sim = Utils.normalization(PowerGrid_sim)
    GrQ_sim = Utils.normalization(GrQ_sim)
    Figeys_sim = Utils.normalization(Figeys_sim)
    
    # visualize results
    plt.figure(figsize=(20,16),dpi=120)
    plt.subplot(331)
    S1 = plt.scatter(Facebook_sim['MRCNN'],Facebook_sim['RCNN'],c=Facebook_sim['SIR'],cmap='jet')
    plt.plot(np.arange(-0.1,1.1,0.1),np.arange(-0.1,1.1,0.1),color='black',linewidth=5,linestyle='--')
    plt.title('Facebook',fontsize=20,fontweight='bold')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.ylabel('RCNN',fontsize=20,fontweight='bold')
    plt.text(-0.1,1.05,'(a)',fontsize=20,fontweight='bold')
    plt.colorbar(S1)
        
    plt.subplot(332)
    S2 = plt.scatter(LastFM_sim['MRCNN'],LastFM_sim['RCNN'],c=LastFM_sim['SIR'],cmap='jet')
    plt.plot(np.arange(-0.1,1.1,0.1),np.arange(-0.1,1.1,0.1),color='black',linewidth=5,linestyle='--')
    plt.title('LastFM',fontsize=20,fontweight='bold')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.text(-0.1,1.05,'(b)',fontsize=20,fontweight='bold')
    plt.colorbar(S2)
        
    plt.subplot(333)
    S3 = plt.scatter(Sex_sim['MRCNN'],Sex_sim['RCNN'],c=Sex_sim['SIR'],cmap='jet')
    plt.plot(np.arange(-0.1,1.1,0.1),np.arange(-0.1,1.1,0.1),color='black',linewidth=5,linestyle='--')
    plt.title('Sex',fontsize=20,fontweight='bold')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.text(-0.1,1.05,'(c)',fontsize=20,fontweight='bold')
    plt.colorbar(S3)
        
    plt.subplot(334)
    S4 = plt.scatter(Figeys_sim['MRCNN'],Figeys_sim['RCNN'],c=Figeys_sim['SIR'],cmap='jet')
    plt.plot(np.arange(-0.1,1.1,0.1),np.arange(-0.1,1.1,0.1),color='black',linewidth=5,linestyle='--')
    plt.title('Figeys',fontsize=20,fontweight='bold')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.text(-0.1,1.05,'(d)',fontsize=20,fontweight='bold')
    plt.ylabel('RCNN',fontsize=20,fontweight='bold')
    plt.colorbar(S4)
        
    plt.subplot(335)
    S5 = plt.scatter(Hep_sim['MRCNN'],Hep_sim['RCNN'],c=Hep_sim['SIR'],cmap='jet')
    plt.plot(np.arange(-0.1,1.1,0.1),np.arange(-0.1,1.1,0.1),color='black',linewidth=5,linestyle='--')
    plt.title('Hep',fontsize=20,fontweight='bold')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.text(-0.1,1.05,'(e)',fontsize=20,fontweight='bold')
    plt.colorbar(S5)

    plt.subplot(336)
    S6 = plt.scatter(Vidal_sim['MRCNN'],Vidal_sim['RCNN'],c=Vidal_sim['SIR'],cmap='jet')
    plt.plot(np.arange(-0.1,1.1,0.1),np.arange(-0.1,1.1,0.1),color='black',linewidth=5,linestyle='--')
    plt.title('Hep',fontsize=20,fontweight='bold')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.text(-0.1,1.05,'(f)',fontsize=20,fontweight='bold')
    plt.colorbar(S6)

    plt.subplot(337)
    S7 = plt.scatter(GrQ_sim['MRCNN'],GrQ_sim['RCNN'],c=GrQ_sim['SIR'],cmap='jet')
    plt.plot(np.arange(-0.1,1.1,0.1),np.arange(-0.1,1.1,0.1),color='black',linewidth=5,linestyle='--')
    plt.title('GrQC',fontsize=20,fontweight='bold')
    plt.xlabel('M-RCNN',fontsize=20,fontweight='bold')
    plt.ylabel('RCNN',fontsize=20,fontweight='bold')
    plt.colorbar(S7)
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.text(-0.1,1.05,'(g)',fontsize=20,fontweight='bold')

    plt.subplot(338)
    S8 = plt.scatter(Ham_sim['MRCNN'],Ham_sim['RCNN'],c=Ham_sim['SIR'],cmap='jet')
    plt.plot(np.arange(-0.1,1.1,0.1),np.arange(-0.1,1.1,0.1),color='black',linewidth=5,linestyle='--')
    plt.title('Hamster',fontsize=20,fontweight='bold')
    plt.xlabel('M-RCNN',fontsize=20,fontweight='bold')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.text(-0.1,1.05,'(h)',fontsize=20,fontweight='bold')
    plt.colorbar(S8)

    plt.subplot(339)
    S9 = plt.scatter(PowerGrid_sim['MRCNN'],PowerGrid_sim['RCNN'],c=PowerGrid_sim['SIR'],cmap='jet')
    plt.plot(np.arange(-0.1,1.1,0.1),np.arange(-0.1,1.1,0.1),color='black',linewidth=5,linestyle='--')
    plt.title('PowerGrid',fontsize=20,fontweight='bold')
    plt.xlabel('M-RCNN',fontsize=20,fontweight='bold')
    plt.xticks(fontsize=18)
    plt.yticks(fontsize=18)
    plt.text(-0.1,1.05,'(i)',fontsize=20,fontweight='bold')
    plt.colorbar(S9)
    plt.tight_layout()
    plt.show()

    # In[7] Experiment 5:
    L_list = [8,16,24,32,40,48,56,64]
    # time needed to construct input
    RCNN_time_1000_4= Test.cal_input_time(BA_1000_4,BA_1000_4_label,L_list,batch_size,num_epochs,lr)
    RCNN_time_1000_10 = Test.cal_input_time(BA_1000_10,BA_1000_10_label,L_list,batch_size,num_epochs,lr)
    RCNN_time_1000_20 = Test.cal_input_time(BA_1000_20,BA_1000_20_label,L_list,batch_size,num_epochs,lr)
    
    RCNN_time_2000_4 = Test.cal_input_time(BA_2000_4,BA_2000_4_label,L_list,batch_size,num_epochs,lr)
    RCNN_time_2000_10 = Test.cal_input_time(BA_2000_10,BA_2000_10_label,L_list,batch_size,num_epochs,lr)
    RCNN_time_2000_20 = Test.cal_input_time(BA_2000_20,BA_2000_20_label,L_list,batch_size,num_epochs,lr)
    
    RCNN_time_3000_4 = Test.cal_input_time(BA_3000_4,BA_3000_4_label,L_list,batch_size,num_epochs,lr)
    RCNN_time_3000_10 = Test.cal_input_time(BA_3000_10,BA_3000_10_label,L_list,batch_size,num_epochs,lr)
    RCNN_time_3000_20 = Test.cal_input_time(BA_3000_20,BA_3000_20_label,L_list,batch_size,num_epochs,lr)
    RCNN_time_pd = pd.DataFrame({'RCNN_1000_4':RCNN_time_1000_4,'RCNN_1000_10':RCNN_time_1000_10,'RCNN_1000_20':RCNN_time_1000_20,'RCNN_2000_4':RCNN_time_2000_4,'RCNN_2000_10':RCNN_time_2000_10,'RCNN_2000_20':RCNN_time_2000_20,'RCNN_3000_4':RCNN_time_3000_4,'RCNN_3000_10':RCNN_time_3000_10,'RCNN_3000_20':RCNN_time_3000_20})
    

    MRCNN_time_1000_4 = Test.cal_input_time2(BA_1000_4,BA_1000_4_label,L_list,batch_size,num_epochs,lr)
    MRCNN_time_1000_10 = Test.cal_input_time2(BA_1000_10,BA_1000_10_label,L_list,batch_size,num_epochs,lr)
    MRCNN_time_1000_20 = Test.cal_input_time2(BA_1000_20,BA_1000_20_label,L_list,batch_size,num_epochs,lr)
    
    MRCNN_time_2000_4 = Test.cal_input_time2(BA_2000_4,BA_2000_4_label,L_list,batch_size,num_epochs,lr)
    MRCNN_time_2000_10 = Test.cal_input_time2(BA_2000_10,BA_2000_10_label,L_list,batch_size,num_epochs,lr)
    MRCNN_time_2000_20= Test.cal_input_time2(BA_2000_20,BA_2000_20_label,L_list,batch_size,num_epochs,lr)
    
    MRCNN_time_3000_4 = Test.cal_input_time2(BA_3000_4,BA_3000_4_label,L_list,batch_size,num_epochs,lr)
    MRCNN_time_3000_10= Test.cal_input_time2(BA_3000_10,BA_3000_10_label,L_list,batch_size,num_epochs,lr)
    MRCNN_time_3000_20 = Test.cal_input_time2(BA_3000_20,BA_3000_20_label,L_list,batch_size,num_epochs,lr)
    MRCNN_time_pd = pd.DataFrame({'MRCNN_1000_4':MRCNN_time_1000_4,'MRCNN_1000_10':MRCNN_time_1000_10,'MRCNN_1000_20':MRCNN_time_1000_20,'MRCNN_2000_4':MRCNN_time_2000_4,'MRCNN_2000_10':MRCNN_time_2000_10,'MRCNN_2000_20':MRCNN_time_2000_20,'MRCNN_3000_4':MRCNN_time_3000_4,'MRCNN_3000_10':MRCNN_time_3000_10,'MRCNN_3000_20':MRCNN_time_3000_20})

    # time needed to construct input and training
    RCNN_train_time_1000_4= Test.cal_training_time(BA_1000_4,BA_1000_4_label,L_list,batch_size,num_epochs,lr)
    RCNN_train_time_1000_10 = Test.cal_training_time(BA_1000_10,BA_1000_10_label,L_list,batch_size,num_epochs,lr)
    RCNN_train_time_1000_20 = Test.cal_training_time(BA_1000_20,BA_1000_20_label,L_list,batch_size,num_epochs,lr)
    
    RCNN_train_time_2000_4 = Test.cal_training_time(BA_2000_4,BA_2000_4_label,L_list,batch_size,num_epochs,lr)
    RCNN_train_time_2000_10 = Test.cal_training_time(BA_2000_10,BA_2000_10_label,L_list,batch_size,num_epochs,lr)
    RCNN_train_time_2000_20 = Test.cal_training_time(BA_2000_20,BA_2000_20_label,L_list,batch_size,num_epochs,lr)
    
    RCNN_train_time_3000_4 = Test.cal_training_time(BA_3000_4,BA_3000_4_label,L_list,batch_size,num_epochs,lr)
    RCNN_train_time_3000_10 = Test.cal_training_time(BA_3000_10,BA_3000_10_label,L_list,batch_size,num_epochs,lr)
    RCNN_train_time_3000_20 = Test.cal_training_time(BA_3000_20,BA_3000_20_label,L_list,batch_size,num_epochs,lr)
    RCNN_time_train_pd = pd.DataFrame({'RCNN_1000_4':RCNN_train_time_1000_4,'RCNN_1000_10':RCNN_train_time_1000_10,'RCNN_1000_20':RCNN_train_time_1000_20,'RCNN_2000_4':RCNN_train_time_2000_4,'RCNN_2000_10':RCNN_train_time_2000_10,'RCNN_2000_20':RCNN_train_time_2000_20,'RCNN_3000_4':RCNN_train_time_3000_4,'RCNN_3000_10':RCNN_train_time_3000_10,'RCNN_3000_20':RCNN_train_time_3000_20})
    

    MRCNN_train_time_1000_4 = Test.cal_training_time2(BA_1000_4,BA_1000_4_label,L_list,batch_size,num_epochs,lr)
    MRCNN_train_time_1000_10 = Test.cal_training_time2(BA_1000_10,BA_1000_10_label,L_list,batch_size,num_epochs,lr)
    MRCNN_train_time_1000_20 = Test.cal_training_time2(BA_1000_20,BA_1000_20_label,L_list,batch_size,num_epochs,lr)
    
    MRCNN_train_time_2000_4 = Test.cal_training_time2(BA_2000_4,BA_2000_4_label,L_list,batch_size,num_epochs,lr)
    MRCNN_train_time_2000_10 = Test.cal_training_time2(BA_2000_10,BA_2000_10_label,L_list,batch_size,num_epochs,lr)
    MRCNN_train_time_2000_20= Test.cal_training_time2(BA_2000_20,BA_2000_20_label,L_list,batch_size,num_epochs,lr)
    
    MRCNN_train_time_3000_4 = Test.cal_training_time2(BA_3000_4,BA_3000_4_label,L_list,batch_size,num_epochs,lr)
    MRCNN_train_time_3000_10= Test.cal_training_time2(BA_3000_10,BA_3000_10_label,L_list,batch_size,num_epochs,lr)
    MRCNN_train_time_3000_20 = Test.cal_training_time2(BA_3000_20,BA_3000_20_label,L_list,batch_size,num_epochs,lr)
    MRCNN_time_train_pd = pd.DataFrame({'MRCNN_1000_4':MRCNN_train_time_1000_4,'MRCNN_1000_10':MRCNN_train_time_1000_10,'MRCNN_1000_20':MRCNN_train_time_1000_20,'MRCNN_2000_4':MRCNN_train_time_2000_4,'MRCNN_2000_10':MRCNN_train_time_2000_10,'MRCNN_2000_20':MRCNN_train_time_2000_20,'MRCNN_3000_4':MRCNN_train_time_3000_4,'MRCNN_3000_10':MRCNN_train_time_3000_10,'MRCNN_3000_20':MRCNN_train_time_3000_20})
    # visualize results
    l_list = np.array([1,2,3,4,5,6,7,8,9])
    L_list = l_list-0.2
    # time needed (input)
    plt.figure(figsize=(20,16),dpi=200)
    plt.subplot(331)
    plt.bar(L_list,RCNN_time_pd['RCNN_1000_4'],color='r',width=0.4,label='RCNN(BA_1000_4)')
    plt.bar(L_list,MRCNN_time_pd['MRCNN_1000_4'],color='b',width=0.4,label='MRCNN(BA_1000_4)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.ylabel('Time(s)',fontsize=24,fontweight='bold')
    plt.text(5.5,3,'(a)', fontsize=24)
    plt.legend(loc='best',fontsize=16)
    #plt.legend(loc=0,fontsize=16)

    plt.subplot(332)
    plt.bar(L_list,RCNN_time_pd['RCNN_1000_10'],color='r',width=0.4,label='RCNN(BA_1000_10)')
    plt.bar(L_list,MRCNN_time_pd['MRCNN_1000_10'],color='b',width=0.4,label='MRCNN(BA_1000_10)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.text(5.7,4.5,'(b)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(333)
    plt.bar(L_list,RCNN_time_pd['RCNN_1000_20'],color='r',width=0.4,label='RCNN(BA_1000_20)')
    plt.bar(L_list,MRCNN_time_pd['MRCNN_1000_20'],color='b',width=0.4,label='MRCNN(BA_1000_20)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.text(5.7,6.95,'(c)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(334)
    plt.bar(L_list,RCNN_time_pd['RCNN_2000_4'],color='r',width=0.4,label='RCNN(BA_2000_4)')
    plt.bar(L_list,MRCNN_time_pd['MRCNN_2000_4'],color='b',width=0.4,label='MRCNN(BA_2000_4)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.ylabel('Time(s)',fontsize=24,fontweight='bold')
    plt.text(5.5,8.5,'(d)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(335)
    plt.bar(L_list,RCNN_time_pd['RCNN_2000_10'],color='r',width=0.4,label='RCNN(BA_2000_10)')
    plt.bar(L_list,MRCNN_time_pd['MRCNN_2000_10'],color='b',width=0.4,label='MRCNN(BA_2000_10)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.text(5.7,10.05,'(e)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(336)
    plt.bar(L_list,RCNN_time_pd['RCNN_2000_20'],color='r',width=0.4,label='RCNN(BA_2000_20)')
    plt.bar(L_list,MRCNN_time_pd['MRCNN_2000_20'],color='b',width=0.4,label='MRCNN(BA_2000_20)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.text(5.7,17.05,'(f)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(337)
    plt.bar(L_list,RCNN_time_pd['RCNN_3000_4'],color='r',width=0.4,label='RCNN(BA_3000_4)')
    plt.bar(L_list,MRCNN_time_pd['MRCNN_3000_4'],color='b',width=0.4,label='MRCNN(BA_3000_4)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlabel(r'$L$',fontsize=24,fontweight='bold')
    plt.ylabel('Time(s)',fontsize=24,fontweight='bold')
    plt.text(5.5,10.35,'(g)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(338)
    plt.bar(L_list,RCNN_time_pd['RCNN_3000_10'],color='r',width=0.4,label='RCNN(BA_3000_10)')
    plt.bar(L_list,MRCNN_time_pd['MRCNN_3000_10'],color='b',width=0.4,label='MRCNN(BA_3000_10)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlabel(r'$L$',fontsize=24,fontweight='bold')
    plt.text(5.7,14.9,'(h)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(339)
    plt.bar(L_list,RCNN_time_pd['RCNN_3000_20'],color='r',width=0.4,label='RCNN(BA_3000_20)')
    plt.bar(L_list,MRCNN_time_pd['MRCNN_3000_20'],color='b',width=0.4,label='MRCNN(BA_3000_20)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlabel(r'$L$',fontsize=24,fontweight='bold')
    plt.text(5.7,29.0,'(i)', fontsize=24)
    plt.legend(loc='best',fontsize=16)
    plt.tight_layout()
    plt.show()

    # time needed (input+training)
    plt.figure(figsize=(20,16),dpi=200)
    plt.subplot(331)
    plt.bar(L_list,RCNN_time_train_pd['RCNN_1000_4'],color='r',width=0.4,label='RCNN(BA_1000_4)')
    plt.bar(L_list,MRCNN_time_train_pd['MRCNN_1000_4'],color='b',width=0.4,label='MRCNN(BA_1000_4)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.ylabel('Time(s)',fontsize=24,fontweight='bold')
    plt.text(5.5,3,'(a)', fontsize=24)
    plt.legend(loc='best',fontsize=16)
    #plt.legend(loc=0,fontsize=16)

    plt.subplot(332)
    plt.bar(L_list,RCNN_time_train_pd['RCNN_1000_10'],color='r',width=0.4,label='RCNN(BA_1000_10)')
    plt.bar(L_list,MRCNN_time_train_pd['MRCNN_1000_10'],color='b',width=0.4,label='MRCNN(BA_1000_10)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.text(5.7,4.5,'(b)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(333)
    plt.bar(L_list,RCNN_time_train_pd['RCNN_1000_20'],color='r',width=0.4,label='RCNN(BA_1000_20)')
    plt.bar(L_list,MRCNN_time_train_pd['MRCNN_1000_20'],color='b',width=0.4,label='MRCNN(BA_1000_20)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.text(5.7,6.95,'(c)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(334)
    plt.bar(L_list,RCNN_time_train_pd['RCNN_2000_4'],color='r',width=0.4,label='RCNN(BA_2000_4)')
    plt.bar(L_list,MRCNN_time_train_pd['MRCNN_2000_4'],color='b',width=0.4,label='MRCNN(BA_2000_4)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.ylabel('Time(s)',fontsize=24,fontweight='bold')
    plt.text(5.5,8.5,'(d)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(335)
    plt.bar(L_list,RCNN_time_train_pd['RCNN_2000_10'],color='r',width=0.4,label='RCNN(BA_2000_10)')
    plt.bar(L_list,MRCNN_time_train_pd['MRCNN_2000_10'],color='b',width=0.4,label='MRCNN(BA_2000_10)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.text(5.7,10.05,'(e)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(336)
    plt.bar(L_list,RCNN_time_train_pd['RCNN_2000_20'],color='r',width=0.4,label='RCNN(BA_2000_20)')
    plt.bar(L_list,MRCNN_time_train_pd['MRCNN_2000_20'],color='b',width=0.4,label='MRCNN(BA_2000_20)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.text(5.7,17.05,'(f)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(337)
    plt.bar(L_list,RCNN_time_train_pd['RCNN_3000_4'],color='r',width=0.4,label='RCNN(BA_3000_4)')
    plt.bar(L_list,MRCNN_time_train_pd['MRCNN_3000_4'],color='b',width=0.4,label='MRCNN(BA_3000_4)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlabel(r'$L$',fontsize=24,fontweight='bold')
    plt.ylabel('Time(s)',fontsize=24,fontweight='bold')
    plt.text(5.5,10.35,'(g)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(338)
    plt.bar(L_list,RCNN_time_train_pd['RCNN_3000_10'],color='r',width=0.4,label='RCNN(BA_3000_10)')
    plt.bar(L_list,MRCNN_time_train_pd['MRCNN_3000_10'],color='b',width=0.4,label='MRCNN(BA_3000_10)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlabel(r'$L$',fontsize=24,fontweight='bold')
    plt.text(5.7,14.9,'(h)', fontsize=24)
    plt.legend(loc='best',fontsize=16)

    plt.subplot(339)
    plt.bar(L_list,RCNN_time_train_pd['RCNN_3000_20'],color='r',width=0.4,label='RCNN(BA_3000_20)')
    plt.bar(L_list,MRCNN_time_train_pd['MRCNN_3000_20'],color='b',width=0.4,label='MRCNN(BA_3000_20)')
    plt.xticks(l_list,[str(i) for i in L_list],fontsize=20)
    plt.yticks(fontsize=20)
    plt.xlabel(r'$L$',fontsize=24,fontweight='bold')
    plt.text(5.7,29.0,'(i)', fontsize=24)
    plt.legend(loc='best',fontsize=16)
    plt.tight_layout()
    plt.show()
